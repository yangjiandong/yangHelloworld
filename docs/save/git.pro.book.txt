
--要查看尚未暂存的文件更新了哪些部分
git diff

--若要看已经暂存起来的文件和上次提交时的快照之间的差异
git diff --cached

--要移除跟踪但不删除文件，以便稍后在 .gitignore 文件中补上，用 --cached  选项即可：
$ git rm --cached readme.txt
--后面可以列出文件或者目录的名字，也可以使用 glob 模式。比方说：
$ git rm log/\*.log

git log --pretty
git log --pretty=format:"%h - %an, %ar : %s"
表 2-1 列出了常用的格式占位符写法及其代表的意义。
选项   说明
%H  提交对象（commit）的完整哈希字串
%h  提交对象的简短哈希字串
%T  树对象（tree）的完整哈希字串
%t  树对象的简短哈希字串
%P  父对象（parent）的完整哈希字串
%p  父对象的简短哈希字串
%an 作者（author）的名字
%ae 作者的电子邮件地址
%ad 作者修订日期（可以用 -date= 选项定制格式）
%ar 作者修订日期，按多久以前的方式显示
%cn 提交者(committer)的名字
%ce 提交者的电子邮件地址
%cd 提交日期
%cr 提交日期，按多久以前的方式显示
%s  提交说明

结合 --graph 选项，可以看到开头多出一些 ASCII 字符串表示的简单图形，形象地展示了每个提交所在的分支及其分化衍合情况

git log 命令支持的选项。表 2-2 还列出了一些其他常用的选项及其释义。

选项 说明
-p 按补丁格式显示每个更新之间的差异。
--stat 显示每次更新的文件修改统计信息。
--shortstat 只显示 --stat 中最后的行数修改添加移除统计。
--name-only 仅在提交信息后显示已修改的文件清单。
--name-status 显示新增、修改、删除的文件清单。
--abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。
--relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）。
--graph 显示 ASCII 图形表示的分支合并历史。
--pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。

--修改最后一次提交
--有时候我们提交完了才发现漏掉了几个文件没有加，或者提交信息写错了。想要撤消刚才的提交操作，可以使用 --amend 选项重新提交：
$ git commit --amend

--http://progit.org/book/zh/ch2-5.html

http://progit.org/book/zh/ch2-5.html

1、查看当前的远程库

要查看当前配置有哪些远程仓库，可以用 git remote 命令
至少可以看到一个名为 origin 的远程库，Git 默认使用这个名字来标识你所克隆的原始仓库：

2、添加远程仓库

要添加一个新的远程仓库，可以指定一个简单的名字，以便将来引用，
运行 git remote add [shortname] [url]

example:

   git remote add github git@github.com:yangjiandong/yangHelloworld.git
   提交时，需将ssh-key 加到 github
   github user:yangjiandong,123456789,young.jiandong@gmail.com

3、从远程仓库抓取数据

正如之前所看到的，可以用下面的命令从远程仓库抓取数据到本地：

$ git fetch [remote-name]

4、推送数据到远程仓库
git push [remote-name] [branch-name]

5、查看远程仓库信息
git remote show [remote-name]

http://progit.org/book/zh/ch2-6.html

1、转换分支的时候最好保持一个清洁的工作区域
   stashing 和 amending

2、用 git merge 命令来进行合并：

$ git checkout master
$ git merge one-branch

3、push 分支到remote
   git push origin(默认remote) one-branch

4、如果想在服务器上删除 serverfix 分支，运行下面的命令：
$ git push origin :serverfix

5、git config --global
   定义的文件在home/.gitconfig

6、alias
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
$ git config --global color.diff.meta "blue black bold"
使用这种技术还可以创造出新的命令，比方说取消暂存文件时的输入比较繁琐，可以自己设置一下：

$ git config --global alias.unstage 'reset HEAD --'

这样一来，下面的两条命令完全等同：

$ git unstage fileA
$ git reset HEAD fileA

显然，使用别名的方式看起来更清楚。另外，我们还经常设置 last 命令：

$ git config --global alias.last 'log -1 HEAD'

然后要看最后一次的提交信息，就变得简单多了：

$ git last

book/zh/ch7-1.html

   --END